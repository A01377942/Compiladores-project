/*
Zabdiel Valentin A01377950
Emiliano Javier Gómez Jiménez A01377235
Luis Jonathan Rosas Ramos A01377942
*/

using System;
using System.Text;
using System.Collections.Generic;

namespace QuetzalDragon {

    class WatVisitor {

        //IDictionary<string, Type> table;
             //Variables globales
        public ISet<string> Vgst
        {
            get;
            private set;
        }


        public WatVisitor(ISet<string> Vgst) {
            this.Vgst=Vgst;
        }

        public string Visit(Program node) {
            return ";; WebAssembly text format code generated by "
                + "the QuetzalDragon compiler.\n\n"
                + "(module\n"
                + "  (import \"quetzal\" \"printi\" (func $printi (param i32) (result i32)))\n"
                + "  (import \"quetzal\" \"printc\" (func $printc (param i32) (result i32)))\n"
                + "  (import \"quetzal\" \"prints\" (func $prints (param i32) (result i32)))\n"
                + "  (import \"quetzal\" \"println\" (func $println (result i32)))\n"
                + "  (import \"quetzal\" \"readi\" (func $readi (result i32)))\n"
                + "  (import \"quetzal\" \"reads\" (func $reads (result i32)))\n"
                + "  (import \"quetzal\" \"new\" (func $new (param i32) (result i32)))\n"
                + "  (import \"quetzal\" \"size\" (func $size (param i32) (result i32)))\n"
                + "  (import \"quetzal\" \"add\" (func $add (param i32 i32) (result i32)))\n"
                + "  (import \"quetzal\" \"get\" (func $get (param i32 i32) (result i32)))\n"
                + "  (import \"quetzal\" \"set\" (func $set (param i32 i32 i32) (result i32)))\n"
                + "  (func\n"
                + "    (export \"start\")\n"
                + "    (result i32)\n"
                + Visit((dynamic) node[0])
                + "    i32.const 0\n"
                + "  )\n"
                + ")\n";
        }

            public string Visit(Def_list node)
        {

            return declareGlobalVariables()+VisitChildrenInDefList(node);

        }

        public string declareGlobalVariables(){

            //si hay variables globales, las declaras en wat
            if(Vgst.Count>0){
            var sb = new StringBuilder();
            foreach (var entry in Vgst) {
                sb.Append($"    (global ${entry} (mut i32) (i32.const 0))\n");
                
            }
            return sb.ToString();
            }
            return "\n";
        }

        
        public string VisitChildrenInDefList(Node node)
        {
     
            var sb = new StringBuilder();
            foreach (var n in node) {
                  if (n.GetType().Name.Equals("Fun_Def"))
                {
                    sb.Append(Visit((dynamic) n));

                }
                
            }
            return sb.ToString();
        }

        public string Visit(Fun_Def node)
        {
    
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(Visit((dynamic) n));
            }
            return sb.ToString();

        }

        //funciona tanto para argumentos de funcion como para declaracion de variables.
        public string Visit(VarDefList node)
        {
            var sb = new StringBuilder();
            foreach (var n in node) {
                sb.Append(declareLocalVariable((dynamic) n));
            }
            return sb.ToString();
        }

        public string declareLocalVariable(Identifier node){

            return $"    local.set ${node.AnchorToken.Lexeme}\n";
        }


    }
}
